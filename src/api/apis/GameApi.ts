/* tslint:disable */
/* eslint-disable */
/**
 * Guess The Number API
 * API for Guess The Number game
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CurrentRoundTableRow,
  RankingTableRow,
  Score,
  ScoreRequestBody,
  ScoreResponse,
} from '../models';
import {
    CurrentRoundTableRowFromJSON,
    CurrentRoundTableRowToJSON,
    RankingTableRowFromJSON,
    RankingTableRowToJSON,
    ScoreFromJSON,
    ScoreToJSON,
    ScoreRequestBodyFromJSON,
    ScoreRequestBodyToJSON,
    ScoreResponseFromJSON,
    ScoreResponseToJSON,
} from '../models';

export interface ScorePostRequest {
    scoreRequestBody: ScoreRequestBody;
}

/**
 * 
 */
export class GameApi extends runtime.BaseAPI {

    /**
     * Returns the table with the Name, Point and Multiplier fields for the current round
     * Get Current Round table
     */
    async currentRoundGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<CurrentRoundTableRow>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/current-round`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(CurrentRoundTableRowFromJSON));
    }

    /**
     * Returns the table with the Name, Point and Multiplier fields for the current round
     * Get Current Round table
     */
    async currentRoundGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<CurrentRoundTableRow>> {
        const response = await this.currentRoundGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * Returns the table with the Name and Score fields for all players in the game
     * Get Ranking table
     */
    async rankingGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<RankingTableRow>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/ranking`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(RankingTableRowFromJSON));
    }

    /**
     * Returns the table with the Name and Score fields for all players in the game
     * Get Ranking table
     */
    async rankingGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<RankingTableRow>> {
        const response = await this.rankingGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * Get My Score
     * Get My Score
     */
    async scoreGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Score>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/score`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ScoreFromJSON(jsonValue));
    }

    /**
     * Get My Score
     * Get My Score
     */
    async scoreGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Score> {
        const response = await this.scoreGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * Calculates the player\'s total score based on the points and multiplier values submitted
     * Calculate Score
     */
    async scorePostRaw(requestParameters: ScorePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ScoreResponse>> {
        if (requestParameters.scoreRequestBody === null || requestParameters.scoreRequestBody === undefined) {
            throw new runtime.RequiredError('scoreRequestBody','Required parameter requestParameters.scoreRequestBody was null or undefined when calling scorePost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/score`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ScoreRequestBodyToJSON(requestParameters.scoreRequestBody),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ScoreResponseFromJSON(jsonValue));
    }

    /**
     * Calculates the player\'s total score based on the points and multiplier values submitted
     * Calculate Score
     */
    async scorePost(requestParameters: ScorePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ScoreResponse> {
        const response = await this.scorePostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
